class Solution{
    static long mod=1000000007;
    static Long numberOfSubsequences(int N, ArrayList<Long> A){
        // code here
        int cnt=0;
        for(int i=0;i<N;i++){
            //checking power of 2.
            if((A.get(i)&A.get(i)-1)==0){
                cnt++;
            }
        }
        //answer goes like this:
        //nC1 + nC2 + nC3 + ... + nCn = 2^n - 1;
        long ans=modpwr(2,cnt)-1;
        Long a=ans;
        return a;
    }
    static long modpwr(long m,long n)
	{
		long res=1;
		m=m%mod;
		if(m==0)
		return 0;
		while(n>0)
		{
			if((n&1)!=0)
			{
				res=(res*m)%mod;
			}
			n=n>>1;
			m=(m*m)%mod;
		}
		return res;
	}
}