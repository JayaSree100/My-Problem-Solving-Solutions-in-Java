//{ Driver Code Starts
//Initial Template for Java
import java.io.*;
import java.util.*;

class GFG
{
    public static void main(String args[])throws IOException
    {
        BufferedReader read = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(read.readLine());
        while(t-- > 0)
        {
            int N = Integer.parseInt(read.readLine());
            ArrayList<Long> A = new ArrayList<Long>();
            String in[] = read.readLine().trim().split(" ");
            for(var i : in){
                Long x = Long.parseLong(i);
                A.add(x);
            }

            Solution ob = new Solution();
            System.out.println(ob.numberOfSubsequences(N,A));
        }
    }
}
// } Driver Code Ends


//User function Template for Java
class Solution{
    static Long numberOfSubsequences(int N, ArrayList<Long> A){
        // code here
        long count =0;
        int res=0;
        // first find the count of num of elements which are power of 2
        for(int i=0;i<A.size();i++){
            if((A.get(i) & A.get(i)-1)==0){
                count++;
            }
        }
        
        // now find the total no of subsequences i.e. if count=c, subSeq = 2*c-1
        // also do a %10e7
        long numSub = (long)((Math.pow(2,count))%1000000007-1); //1e9+7
        return numSub;
        
    }
    
}