//{ Driver Code Starts
//Initial Template for Java
import java.io.*;
import java.util.*; 

class GFG{
    public static void main(String args[]) throws IOException { 
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(br.readLine());
        while(t > 0){
            int n = Integer.parseInt(br.readLine());
            String s = br.readLine();
            Solution ob = new Solution();
            System.out.println(ob.minLength(s, n));
            t--;
        }
    } 
} 
// } Driver Code Ends


//User function Template for Java

class Solution { 
    public int minLength(String s, int n) { 
    	// code here 
   // if difference is mod(1) or mod(9), remove both numbers
    	
    	// 1st store the toCheck patterns in hashset
    	ArrayList<String> toCheck = new ArrayList<>();
    	toCheck.add("12");
    	toCheck.add("21");
    	toCheck.add("34");
    	toCheck.add("43");
    	toCheck.add("56");
    	toCheck.add("65");
    	toCheck.add("78");
    	toCheck.add("87");
    	toCheck.add("09");
    	toCheck.add("90");
    	
    	//StringBuilder sb1 = new StringBuilder("12"); // delete
    	//System.out.println("toCheck "+toCheck.contains(sb1.toString()));
    	
    	// create a stack to compare the adjacent elements of the given String
    	Stack<Character> st = new Stack<>();
    	
 
    	
    	//ArrayList<Character> chArr = s.toCharArray();
    	//st.push(s.charAt(0));
    	for( int i=0;i<s.length();i++){
    	    //System.out.println("i="+i+" stack ="+st.toString());
    	    if(!st.isEmpty()){
    	        StringBuilder sb = new StringBuilder();
    	        sb.append(st.peek());
    	        sb.append(s.charAt(i));
    	        //System.out.println("sb is "+sb.toString()+" toCheck.contains(sb)="+toCheck.contains(sb));
    	        if(toCheck.contains(sb.toString())){
    	            st.pop();
    	            
    	        }
    	        else{
    	            st.push(s.charAt(i));
    	        }
    	    }
    	    else{
    	        st.push(s.charAt(i));
    	       
    	    }
    	}
    	
    	return st.size();
    	
    	
    }
}