//{ Driver Code Starts
//Initial Template for Java

import java.io.*;
import java.util.*;

class GFG
{
    public static void main(String args[])throws IOException
    {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        
        while(t-- > 0)
        {
            int n = sc.nextInt();
            int m = sc.nextInt();
            
            int matrix[][] = new int[n][m];
            
            for(int i = 0; i < n; i++)
            {
                for(int j = 0; j < m; j++)
                 matrix[i][j] = sc.nextInt();
            }
            Solution ob = new Solution();
            ArrayList<Integer> ans = ob.boundaryTraversal(matrix, n, m);
            for (Integer val: ans) 
                System.out.print(val+" "); 
            System.out.println();
        }
    }
}
// } Driver Code Ends


//User function Template for Java

class Solution
{
    //Function to return list of integers that form the boundary 
    //traversal of the matrix in a clockwise manner.
    static ArrayList<Integer> boundaryTraversal(int matrix[][], int n, int m)
    {
        // code here 
        ArrayList<Integer> ans = new ArrayList<>();
        
        // edge cases ; if only one row or one colum
        if(n==1){
            for(int col=0;col<m;col++)
                ans.add(matrix[0][col]);
            return ans;
        }
        if(m==1){
            for(int row=0;row<n;row++){
                ans.add(matrix[row][0]);
            }
            return ans;
        }
        // 1st row=0; col=0ton-1
        for(int col=0;col<m;col++){
            ans.add(matrix[0][col]);
        }
        
        //from last col=n-1;row=1 to n-1
        for(int row=1;row<n;row++){
            ans.add(matrix[row][m-1]);
        }
        //for row=n-1, col-n-2 to 0
        for(int col=m-2;col>=0;col--){
            ans.add(matrix[n-1][col]);
        }
        // for col=0;row=n-2 to 1
        for(int row=n-2;row>=1;row--){
            ans.add(matrix[row][0]);
        }
        
        return ans;
    }
}
