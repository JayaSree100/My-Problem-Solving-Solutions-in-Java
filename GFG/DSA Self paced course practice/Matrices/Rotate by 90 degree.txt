//{ Driver Code Starts
//Initial Template for Java

import java.io.*;
import java.util.*;

class GFG
{
    public static void main(String args[])throws IOException
    {
         BufferedReader read = new BufferedReader(new InputStreamReader(System.in));
        int t= Integer.parseInt(read.readLine());
        
        while(t-- > 0)
        {
            int n = Integer.parseInt(read.readLine());
            int matrix[][] = new int[n][n];
            String st[] = read.readLine().trim().split("\\s+");
            int k = 0;
            for(int i = 0; i < n; i++)
            {
                for(int j = 0; j < n; j++)
                    matrix[i][j] = Integer.parseInt(st[k++]);
            }
            Solution ob = new Solution();
            ob.rotateby90(matrix, n);
            for(int i = 0; i < n; i++)
            {
                for(int j = 0; j < n; j++)
                    System.out.print(matrix[i][j] + " ");
            }
            System.out.println();
        }
    }
}

// } Driver Code Ends


//User function Template for Java

class Solution
{
    //Function to rotate matrix anticlockwise by 90 degrees.
    static void rotateby90(int matrix[][], int n) 
    { 
        // code here
        
        // step 1 - transpose 
        // step 2 - reverse row elements of all columns
        
        //transpose
        int temp=0;
        for(int row=0;row<n-1;row++){
            for(int col=row+1;col<n;col++){
                temp= matrix[row][col];
                matrix[row][col]=matrix[col][row];
                matrix[col][row]=temp;
            }
        }
        //reverse rows
        for(int col=0;col<n;col++){
            int row_low=0,row_high=n-1;
            while(row_low<=row_high){
                temp=matrix[row_low][col];
                matrix[row_low][col]=matrix[row_high][col];
                matrix[row_high][col]=temp;
                row_low++;
                row_high--;
            }
        }
    }
}